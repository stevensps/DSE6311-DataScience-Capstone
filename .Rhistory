## Tell us the results!
print(paste0("The ideal split ratio is ", train_prop, ":", test_prop, " training:testing"))
## Return the size of the training set
return(train_prop)
}
View(calcSplitRatio)
split_ratio <- calcSplitRatio(brfss_subset)
calcSplitRatio <- function(p = NA, brfss_subset) {
## @p  = the number of parameters. by default, if none are provided, the number of columns (predictors) in the dataset are used
## @df = the dataframe that will be used for the analysis
## If the number of parameters isn't supplied, set it to the number of features minus 1 for the target
if(is.na(p)) {
p <- ncol(df) -1   ## COMMENT HERE
}
## Calculate the ideal number of testing set
test_N <- (1/sqrt(p))*nrow(df)
## Turn that into a testing proportion
test_prop <- round((1/sqrt(p))*nrow(df)/nrow(df), 2)
## And find the training proportion
train_prop <- 1-test_prop
## Tell us the results!
print(paste0("The ideal split ratio is ", train_prop, ":", test_prop, " training:testing"))
## Return the size of the training set
return(train_prop)
}
# Chunk 1
library(haven)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gtsummary)
library(forcats)
library(naniar)
library(corrplot)
library(stats)
library(stringr)
library(car)
library(reshape2)
library(viridis)
library(GGally)
library(knitr)
library(kableExtra)
library(scales)
library(caret)
library(mice)
# Chunk 2
# Code below imports the data to any person's machine
if (!dir.exists("C:/temp")) {
dir.create("C:/temp")
} # If statement creates temp folder on machine
zipUrl <- "https://www.cdc.gov/brfss/annual_data/2023/files/LLCP2023XPT.zip"
zipPath <- path.expand("C:/temp/LLCP2023XPT.zip")
if (!file.exists(zipPath)) {
download.file(zipUrl, destfile = zipPath)
} #Download the file
extractPath <- "C:/temp"
sasFile <- file.path(extractPath, "LLCP2023.XPT")
if (!file.exists(sasFile)) {
unzip(zipPath, exdir = extractPath)
}
list.files(extractPath) # Extract, unzip, and make sure file exists
if (file.exists(sasFile)) {
brfss_raw <- read_xpt(sasFile)
head(brfss_raw)
} else {
message("File does not exist, check download or unzip process.")
} # Read file into R after specifying file variable
# Chunk 3
names(brfss_raw)
# Chunk 4
brfss_subset <- brfss_raw %>%
select(
ment14d   = `_MENT14D`,
menthlth  = `MENTHLTH`,
hlthpl1   = `_HLTHPL1`,
persdoc3  = PERSDOC3,
medcost1  = MEDCOST1,
checkup1  = CHECKUP1,
primins1  = PRIMINS1,
addepev3  = ADDEPEV3,
acedeprs  = ACEDEPRS,
decide    = DECIDE,
exerany2  = EXERANY2,
pa150r4   = `_PA150R4`,
sex       = `_SEX`,
age80     = `_AGE80`,
race      = `_RACE`,
educa     = EDUCA,
employ1   = EMPLOY1,
marital   = MARITAL,
incomg1   = `_INCOMG1`,
numadult  = NUMADULT,
state     = `_STATE`
)
source("calcSplitRatio-3.R")
split_ratio <- calcSplitRatio(df = brfss_subset)
set.seed(42)
split_ratio <- calcSplitRatio(df = brfss_subset)
list.files()
calcSplitRatio <- function(p = NA, df) {
## @p  = the number of parameters. by default, if none are provided, the number of columns (predictors) in the dataset are used
## @df = the dataframe that will be used for the analysis
## If the number of parameters isn't supplied, set it to the number of features minus 1 for the target
if(is.na(p)) {
p <- ncol(df) -1   ## COMMENT HERE
}
## Calculate the ideal number of testing set
test_N <- (1/sqrt(p))*nrow(df)
## Turn that into a testing proportion
test_prop <- round((1/sqrt(p))*nrow(df)/nrow(df), 2)
## And find the training proportion
train_prop <- 1-test_prop
## Tell us the results!
print(paste0("The ideal split ratio is ", train_prop, ":", test_prop, " training:testing"))
## Return the size of the training set
return(train_prop)
}
split_ratio <- calcSplitRatio(df = brfss_subset)
set.seed(42)
trainIndex <- createDataPartition(brfss_subset$ment14d, p=split_ratio, list=FALSE)
train_df <- brfss_subset[trainIndex, ]
test_df <- brfss_subset[-trainIndex, ]
train_df <- train_df %>%
mutate(
hlthpl1   = na_if(hlthpl1, 9),
persdoc3  = na_if(persdoc3, 7),
persdoc3  = na_if(persdoc3, 9),
medcost1  = na_if(medcost1, 7),
medcost1  = na_if(medcost1, 9),
checkup1  = na_if(checkup1, 7),
checkup1  = na_if(checkup1, 9),
primins1  = na_if(primins1, 77),
primins1  = na_if(primins1, 99),
exerany2  = na_if(exerany2, 7),
exerany2  = na_if(exerany2, 9),
pa150r4   = na_if(pa150r4, 9)
)
```
train_df <- train_df %>%
mutate(
hlthpl1   = na_if(hlthpl1, 9),
persdoc3  = na_if(persdoc3, 7),
persdoc3  = na_if(persdoc3, 9),
medcost1  = na_if(medcost1, 7),
medcost1  = na_if(medcost1, 9),
checkup1  = na_if(checkup1, 7),
checkup1  = na_if(checkup1, 9),
primins1  = na_if(primins1, 77),
primins1  = na_if(primins1, 99),
exerany2  = na_if(exerany2, 7),
exerany2  = na_if(exerany2, 9),
pa150r4   = na_if(pa150r4, 9)
)
train_df <-  train_df %>%
mutate(
educa     = na_if(educa, 9),
employ1   = na_if(employ1, 9),
marital   = na_if(marital, 9),
incomg1   = na_if(incomg1, 9),
)
train_df <-  train_df %>%
mutate(
menthlth = ifelse(menthlth == 88, 0, menthlth),
menthlth = na_if(menthlth, 77),
menthlth = na_if(menthlth, 99))
table(train_df$menthlth)
table(train_df$ment14d, useNA = "ifany")
train_df <- train_df %>%
mutate(
race = na_if(race, 9)
)
table(train_df$race, useNA = "ifany")
brfss_subset <- brfss_subset %>%
mutate(
ment14d = na_if(ment14d, 9)
)
table(train_df$ment14d, useNA = "ifany")
# Chunk 1
library(haven)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gtsummary)
library(forcats)
library(naniar)
library(corrplot)
library(stats)
library(stringr)
library(car)
library(reshape2)
library(viridis)
library(GGally)
library(knitr)
library(kableExtra)
library(scales)
library(caret)
library(mice)
# Chunk 2
# Code below imports the data to any person's machine
if (!dir.exists("C:/temp")) {
dir.create("C:/temp")
} # If statement creates temp folder on machine
zipUrl <- "https://www.cdc.gov/brfss/annual_data/2023/files/LLCP2023XPT.zip"
zipPath <- path.expand("C:/temp/LLCP2023XPT.zip")
if (!file.exists(zipPath)) {
download.file(zipUrl, destfile = zipPath)
} #Download the file
extractPath <- "C:/temp"
sasFile <- file.path(extractPath, "LLCP2023.XPT")
if (!file.exists(sasFile)) {
unzip(zipPath, exdir = extractPath)
}
list.files(extractPath) # Extract, unzip, and make sure file exists
if (file.exists(sasFile)) {
brfss_raw <- read_xpt(sasFile)
head(brfss_raw)
} else {
message("File does not exist, check download or unzip process.")
} # Read file into R after specifying file variable
# Chunk 3
names(brfss_raw)
# Chunk 4
brfss_subset <- brfss_raw %>%
select(
ment14d   = `_MENT14D`,
menthlth  = `MENTHLTH`,
hlthpl1   = `_HLTHPL1`,
persdoc3  = PERSDOC3,
medcost1  = MEDCOST1,
checkup1  = CHECKUP1,
primins1  = PRIMINS1,
addepev3  = ADDEPEV3,
acedeprs  = ACEDEPRS,
decide    = DECIDE,
exerany2  = EXERANY2,
pa150r4   = `_PA150R4`,
sex       = `_SEX`,
age80     = `_AGE80`,
race      = `_RACE`,
educa     = EDUCA,
employ1   = EMPLOY1,
marital   = MARITAL,
incomg1   = `_INCOMG1`,
numadult  = NUMADULT,
state     = `_STATE`
)
list.files()
source("calcSplitRatio-3.R")
split_ratio <- calcSplitRatio(df = brfss_subset)
set.seed(42)
trainIndex <- createDataPartition(brfss_subset$ment14d, p=split_ratio, list=FALSE)
train_df <- brfss_subset[trainIndex, ]
test_df <- brfss_subset[-trainIndex, ]
train_df <- train_df %>%
mutate(
hlthpl1   = na_if(hlthpl1, 9),
persdoc3  = na_if(persdoc3, 7),
persdoc3  = na_if(persdoc3, 9),
medcost1  = na_if(medcost1, 7),
medcost1  = na_if(medcost1, 9),
checkup1  = na_if(checkup1, 7),
checkup1  = na_if(checkup1, 9),
primins1  = na_if(primins1, 77),
primins1  = na_if(primins1, 99),
exerany2  = na_if(exerany2, 7),
exerany2  = na_if(exerany2, 9),
pa150r4   = na_if(pa150r4, 9)
)
train_df <-  train_df %>%
mutate(
educa     = na_if(educa, 9),
employ1   = na_if(employ1, 9),
marital   = na_if(marital, 9),
incomg1   = na_if(incomg1, 9),
)
train_df <-  train_df %>%
mutate(
menthlth = ifelse(menthlth == 88, 0, menthlth),
menthlth = na_if(menthlth, 77),
menthlth = na_if(menthlth, 99))
table(train_df$menthlth)
train_df <- train_df %>%
mutate(
ment14d = na_if(ment14d, 9)
)
table(train_df$ment14d, useNA = "ifany")
train_df <- train_df %>%
mutate(
race = na_if(race, 9)
)
table(train_df$race, useNA = "ifany")
test_df <- test_df %>%
mutate(
hlthpl1   = na_if(hlthpl1, 9),
persdoc3  = na_if(persdoc3, 7),
persdoc3  = na_if(persdoc3, 9),
medcost1  = na_if(medcost1, 7),
medcost1  = na_if(medcost1, 9),
checkup1  = na_if(checkup1, 7),
checkup1  = na_if(checkup1, 9),
primins1  = na_if(primins1, 77),
primins1  = na_if(primins1, 99),
exerany2  = na_if(exerany2, 7),
exerany2  = na_if(exerany2, 9),
pa150r4   = na_if(pa150r4, 9)
)
test_df <-  test_df %>%
mutate(
educa     = na_if(educa, 9),
employ1   = na_if(employ1, 9),
marital   = na_if(marital, 9),
incomg1   = na_if(incomg1, 9),
)
test_df <-  test_df %>%
mutate(
menthlth = ifelse(menthlth == 88, 0, menthlth),
menthlth = na_if(menthlth, 77),
menthlth = na_if(menthlth, 99))
table(test_df$menthlth)
test_df <- test_df %>%
mutate(
ment14d = na_if(ment14d, 9)
)
table(test_df$ment14d, useNA = "ifany")
test_df <- test_df %>%
mutate(
race = na_if(race, 9)
)
table(test_df$race, useNA = "ifany")
set.seed(123)
imputedTrain <- mice(train_df, m = 1,
method = "rf",
ntree=300,
nodesize=5,
mtry=7,
maxit = 15)
set.seed(123)
library(fastDummies)
install.packages("fastDummies")
library(fastDummies)
train_df <- dummy_cols(train_df, select_columns = c("race", "primins1", "employ1",
"marital", "incomg1", "state"), remove_first_dummy = TRUE, remove_selected_columns = TRUE)
View(train_df)
# Chunk 1
library(haven)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gtsummary)
library(forcats)
library(naniar)
library(corrplot)
library(stats)
library(stringr)
library(car)
library(reshape2)
library(viridis)
library(GGally)
library(knitr)
library(kableExtra)
library(scales)
library(caret)
library(mice)
library(fastDummies)
# Chunk 2
# Code below imports the data to any person's machine
if (!dir.exists("C:/temp")) {
dir.create("C:/temp")
} # If statement creates temp folder on machine
zipUrl <- "https://www.cdc.gov/brfss/annual_data/2023/files/LLCP2023XPT.zip"
zipPath <- path.expand("C:/temp/LLCP2023XPT.zip")
if (!file.exists(zipPath)) {
download.file(zipUrl, destfile = zipPath)
} #Download the file
extractPath <- "C:/temp"
sasFile <- file.path(extractPath, "LLCP2023.XPT")
if (!file.exists(sasFile)) {
unzip(zipPath, exdir = extractPath)
}
list.files(extractPath) # Extract, unzip, and make sure file exists
if (file.exists(sasFile)) {
brfss_raw <- read_xpt(sasFile)
head(brfss_raw)
} else {
message("File does not exist, check download or unzip process.")
} # Read file into R after specifying file variable
# Chunk 3
names(brfss_raw)
# Chunk 4
brfss_subset <- brfss_raw %>%
select(
ment14d   = `_MENT14D`,
menthlth  = `MENTHLTH`,
hlthpl1   = `_HLTHPL1`,
persdoc3  = PERSDOC3,
medcost1  = MEDCOST1,
checkup1  = CHECKUP1,
primins1  = PRIMINS1,
addepev3  = ADDEPEV3,
acedeprs  = ACEDEPRS,
decide    = DECIDE,
exerany2  = EXERANY2,
pa150r4   = `_PA150R4`,
sex       = `_SEX`,
age80     = `_AGE80`,
race      = `_RACE`,
educa     = EDUCA,
employ1   = EMPLOY1,
marital   = MARITAL,
incomg1   = `_INCOMG1`,
numadult  = NUMADULT,
state     = `_STATE`
)
# Chunk 5
list.files()
source("calcSplitRatio-3.R")
split_ratio <- calcSplitRatio(df = brfss_subset)
set.seed(42)
trainIndex <- createDataPartition(brfss_subset$ment14d, p=split_ratio, list=FALSE)
train_df <- brfss_subset[trainIndex, ]
test_df <- brfss_subset[-trainIndex, ]
# Chunk 6
train_df <- train_df %>%
mutate(
hlthpl1   = na_if(hlthpl1, 9),
persdoc3  = na_if(persdoc3, 7),
persdoc3  = na_if(persdoc3, 9),
medcost1  = na_if(medcost1, 7),
medcost1  = na_if(medcost1, 9),
checkup1  = na_if(checkup1, 7),
checkup1  = na_if(checkup1, 9),
primins1  = na_if(primins1, 77),
primins1  = na_if(primins1, 99),
exerany2  = na_if(exerany2, 7),
exerany2  = na_if(exerany2, 9),
pa150r4   = na_if(pa150r4, 9)
)
# Chunk 7
train_df <-  train_df %>%
mutate(
educa     = na_if(educa, 9),
employ1   = na_if(employ1, 9),
marital   = na_if(marital, 9),
incomg1   = na_if(incomg1, 9),
)
# Chunk 8
train_df <-  train_df %>%
mutate(
menthlth = ifelse(menthlth == 88, 0, menthlth),
menthlth = na_if(menthlth, 77),
menthlth = na_if(menthlth, 99))
table(train_df$menthlth)
# Chunk 9
train_df <- train_df %>%
mutate(
ment14d = na_if(ment14d, 9)
)
# Chunk 10
table(train_df$ment14d, useNA = "ifany")
# Chunk 11
train_df <- train_df %>%
mutate(
race = na_if(race, 9)
)
table(train_df$race, useNA = "ifany")
# Chunk 12
test_df <- test_df %>%
mutate(
hlthpl1   = na_if(hlthpl1, 9),
persdoc3  = na_if(persdoc3, 7),
persdoc3  = na_if(persdoc3, 9),
medcost1  = na_if(medcost1, 7),
medcost1  = na_if(medcost1, 9),
checkup1  = na_if(checkup1, 7),
checkup1  = na_if(checkup1, 9),
primins1  = na_if(primins1, 77),
primins1  = na_if(primins1, 99),
exerany2  = na_if(exerany2, 7),
exerany2  = na_if(exerany2, 9),
pa150r4   = na_if(pa150r4, 9)
)
# Chunk 13
test_df <-  test_df %>%
mutate(
educa     = na_if(educa, 9),
employ1   = na_if(employ1, 9),
marital   = na_if(marital, 9),
incomg1   = na_if(incomg1, 9),
)
# Chunk 14
test_df <-  test_df %>%
mutate(
menthlth = ifelse(menthlth == 88, 0, menthlth),
menthlth = na_if(menthlth, 77),
menthlth = na_if(menthlth, 99))
table(test_df$menthlth)
# Chunk 15
test_df <- test_df %>%
mutate(
ment14d = na_if(ment14d, 9)
)
# Chunk 16
table(test_df$ment14d, useNA = "ifany")
# Chunk 17
test_df <- test_df %>%
mutate(
race = na_if(race, 9)
)
table(test_df$race, useNA = "ifany")
EncodeDF <- dummy_cols(train_df, select_columns = c("race", "primins1", "employ1",
"marital", "incomg1", "state"), remove_first_dummy = TRUE, remove_selected_columns = TRUE)
brfss_encoded <- data.frame(predict(EncodeDF, newdata = train_df))
